{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","link","intro_block","document","querySelector","game_block","result_block","finish_block","useState","question","setQuestion","answers","setAnswers","questionCount","setQuestionCount","playerCount","setPlayerCount","answers_extra","finish_title","result_text","updateQuestion","a","fetch","then","data","json","response","decodeURIComponent","results","replace","console","log","correct_answer","toString","oldArray","concat","incorrect_answers","split","innerText","setTimeout","length","style","display","numbers","randomNumber","Math","floor","random","neededString","neededBlock","classList","remove","add","splice","indexOf","leftNumber","Number","wrongString","wrongBlock","filter","entry","i","currentString","currentBlock","checkAnswer","e","target","contains","opacity","useEffect","className","href","rel","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1657cfa.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const link = `https://opentdb.com/api.php?amount=1`\n\n  const intro_block = document.querySelector(\".intro\")\n  const game_block = document.querySelector(\".game\")\n  const result_block = document.querySelector(\".result\")\n  const finish_block = document.querySelector(\".finish\")\n\n  const [question, setQuestion] = useState(\"\")\n  const [answers, setAnswers] = useState([])\n\n  const [questionCount, setQuestionCount] = useState(1)\n  const [playerCount, setPlayerCount] = useState(0)\n\n  const answers_extra = document.querySelector(\".answers_row_extra\")\n  const finish_title = document.querySelector(\".finish_title\")\n  const result_text = document.querySelector(\".result_text\")\n\n\n  useEffect(() => {\n    updateQuestion()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n\n  async function updateQuestion() {\n    await fetch(link)\n    .then(data => data = data.json())\n    .then(function(response) {\n      setQuestion(decodeURIComponent(response.results[0].question).replace(/&quot;/g,'\"').replace(/&#039;/g,'\"'))\n\n      console.log(question)\n      setAnswers(`${response.results[0].correct_answer.toString()},`);\n      setAnswers(oldArray => [oldArray.concat(response.results[0].incorrect_answers)]);\n      setAnswers(answers => answers = answers[0].split(\",\"))\n    })\n\n\n    const question_title = document.querySelector(\".question_title\")\n    question_title.innerText = question;\n    const question_number = document.querySelector(\".question_number\")\n    question_number.innerText = `Question #${questionCount}`\n\n    setTimeout(() => {\n      if(questionCount === 1) {\n        setQuestionCount(2)\n      } \n    }, 700)\n    \n\n    if(answers.length === 2) {\n      answers_extra.style.display = \"none\"\n      const numbers = [0,1]\n      const randomNumber = Math.floor(Math.random() * 2)\n      const neededString = `.answer_${randomNumber}`\n      const neededBlock = document.querySelector(neededString)\n      neededBlock.classList.remove(\"correct\")\n      neededBlock.classList.remove(\"wrong\")\n      neededBlock.classList.add(\"correct\")\n      neededBlock.innerText = `${answers[0]}`\n      numbers.splice(numbers.indexOf(randomNumber),numbers.indexOf(randomNumber) + 1 )\n      const leftNumber = Number(numbers[0])\n      const wrongString = `.answer_${leftNumber}`\n      const wrongBlock = document.querySelector(wrongString)\n      wrongBlock.classList.remove(\"correct\")\n      wrongBlock.classList.remove(\"wrong\")\n      wrongBlock.classList.add(\"wrong\")\n      wrongBlock.innerText = `${answers[1]}`\n    } else {\n      let numbers = [0,1,2,3]\n      let randomNumber = Math.floor(Math.random() * 4)\n      let neededString = `.answer_${randomNumber}`\n      let neededBlock = document.querySelector(neededString)\n      neededBlock.classList.remove(\"correct\")\n      neededBlock.classList.remove(\"wrong\")\n      neededBlock.classList.add(\"correct\")\n      neededBlock.innerText = `${answers[0]}`\n      numbers = numbers.filter(function(entry) { return numbers.indexOf(entry) !== numbers.indexOf(randomNumber) });\n      for(let i = 0; i < numbers.length; i++) {\n        let currentString = `.answer_${numbers[i]}`\n        let currentBlock = document.querySelector(currentString)\n        currentBlock.classList.remove(\"correct\")\n        currentBlock.classList.remove(\"wrong\")\n        currentBlock.classList.add(\"wrong\")\n        currentBlock.innerText = `${answers[i+1]}`\n      }\n    }\n  }\n\n  function checkAnswer (e) {\n    if(e.target.classList.contains(\"correct\")) {\n      setPlayerCount(playerCount => playerCount = playerCount+1)\n      if(playerCount === 0) {\n        result_text.innerText = `Correct! Your Score - 1`\n      } else {\n        result_text.innerText = `Correct! Your Score - ${playerCount}`\n      }\n    } else {\n      result_text.innerText = `Wrong! Your Score - ${playerCount}`\n    }\n\n    \n    setQuestionCount(questionCount => questionCount = questionCount+1)\n    \n\n    game_block.style.opacity=\"0\"\n    result_block.style.opacity=\"1\"\n\n    setTimeout(() => {\n      game_block.style.display=\"none\"\n      result_block.style.display=\"block\"\n      updateQuestion()\n    }, 500 )\n\n    if(questionCount === 11) {\n      setTimeout(() => {\n        finishGame()\n      }, 2000)\n    } else {\n      setTimeout(() => {\n        game_block.style.opacity=\"1\"\n        result_block.style.opacity=\"0\"\n      }, 2000)\n  \n      setTimeout(() => {\n        game_block.style.display=\"block\"\n        result_block.style.display=\"none\"\n      }, 2500)\n    }\n    \n\n    \n  }\n\n  function startGame () {\n    updateQuestion()\n\n    intro_block.style.opacity=\"0\"\n    game_block.style.opacity=\"1\"\n\n    setTimeout(() => {\n      intro_block.style.display=\"none\"\n      game_block.style.display=\"block\"\n    }, 500 )\n  }\n\n  function finishGame () {\n    finish_title.innerText = `Game finished! Final Score - ${playerCount}`\n\n    result_block.style.opacity=\"0\"\n    finish_block.style.opacity=\"1\"\n\n    setTimeout(() => {\n      result_block.style.display=\"none\"\n      finish_block.style.display=\"block\"\n    }, 500 )\n  }\n\n  function restartGame () {\n    setQuestionCount(1)\n    setPlayerCount(0)\n\n    intro_block.style.opacity=\"1\"\n    finish_block.style.opacity=\"0\"\n\n    setTimeout(() => {\n      intro_block.style.display=\"block\"\n      finish_block.style.display=\"none\"\n    }, 500 )\n  }\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css2?family=Pacifico&display=swap\" rel=\"stylesheet\"></link>\n\n\n      <div className=\"title\">Quiz Game</div>\n\n      <div className=\"intro\">\n        <div className=\"intro_title\">Game consists of 10 random questions. <br></br> Are you ready?</div>\n        <button className=\"intro_button\" onClick={startGame}>Begin Game</button>\n      </div>\n\n      <div className=\"game\">\n        <div className=\"question_number\">Question #1</div>\n        <div className=\"question_title\">Who am I?</div>\n        <div className=\"answers\">\n          <div className=\"answers_row\">\n            <div className=\"answer answer_0\" onClick={checkAnswer}>Peter Fleming</div>\n            <div className=\"answer answer_1\" onClick={checkAnswer}>Peter Fleming</div>\n          </div>\n          <div className=\"answers_row_extra\">\n            <div className=\"answer answer_2\" onClick={checkAnswer}>Peter Fleming</div>\n            <div className=\"answer answer_3\" onClick={checkAnswer}>Peter Fleming</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"result\">\n        <div className=\"result_text\">Correct! Your score - 228</div>\n      </div>\n\n      <div className=\"finish\">\n        <div className=\"finish_title\">Game finished! Your score - 228</div>\n        <button className=\"finish_button\" onClick={restartGame}>Restart</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}